#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jul 29 00:17:10 2019

@author: cihat
"""

import numpy as np
import pandas as pd
#import time as tm
import linecache as gl
import glob
import os

import platform
op_sys = platform.system()
if op_sys == 'Windows':
    dtdir = 'C:\\Users\\kurt_\\PARAM DATA\\'
    _sl = '\\'
elif op_sys == 'Linux':
    dtdir = '/home/cihat/programs/gdl/'
    _sl = '/'

os.chdir(dtdir)

print(" Warning!!! Plot paramP34 vs tmP43 to see\n if these two are equal for \
smaller particles.")

#%%

file=glob.glob(dtdir+'final{}*.dat'.format(_sl))
file_names = []
for par in file:
    param_run = par[par.find('pm'):par.find('.dat')]
    file_names.append(param_run)
    q = gl.getline(par, 2)
    q = q.split()
    qabs = [float(q[0])]
    qsca = [float(q[1])]
    qext = [float(q[2])]

    try:
        csca = [float(q[3])]
    except ValueError:
        print('csca value error',param_run)
    cabs =[float(q[4])]
    taus_out = [float(q[5])]
    taua_out = [float(q[6])]

    eff = {'qa': qabs, 'qs': qsca, 'qe': qext, 'cs': csca, 'ca': cabs, 'taus': taus_out, 'taua': taua_out}
    vars()[param_run+'_eff'] = pd.DataFrame(eff)

    # Now I will collect scattering matrix data in a data frame
    data = []
    for line in range(4, 185):
        a = gl.getline(par, line)
        columns = a.split()
        rw = {}
        rw['P11'] = columns[0]
        rw['P12'] = columns[1]
        rw['P22'] = columns[2]
        rw['P33'] = columns[3]
        rw['P34'] = columns[4]
        rw['P44'] = columns[5]

        data.append(rw)

    # Now Converting to a Dataframe
    dt = pd.DataFrame(data)
    del(rw)

    # Let's convert the string values to numeric all at once
    vars()[param_run+'_mx'] = dt.apply(pd.to_numeric)
    vars()[param_run+'_mx']['theta'] = np.arange(0, 181)

    # For now I will not convert the data to xarray. I do not see any benefit
    # doing that other than being able to collect matrix elements and efficien-
    # ies in the same dataset. Hence, below code block is commented

#    # Now collecting everything in an xarray dataset
#    # Note that PXX are saved as variable, but Qx and g are saved as dimension
#    vars()[param_run] = xr.Dataset.from_dataframe(dt)
#    vars()[param_run]['qext'] = qext
#    vars()[param_run]['qabs'] = qabs
#    vars()[param_run]['qsca'] = qsca
#    vars()[param_run]['g'] = g

if op_sys == 'Windows':
    dtdir = 'C:\\Users\\kurt_\\Dropbox\\Code\\special\\data\\'
    _sl = '\\'
elif op_sys == 'Linux':
    dtdir = '/home/cihat/Dropbox/code/special/data/'
    _sl = '/'
os.chdir(dtdir)

#%%

print('Remove this cell, and put the actual code into the above loop')
Valid_aero = []
for pm_id in file_names:
    #pm_eff = vars()[pm_id+'_eff']
    pm = vars()[pm_id+'_mx']
    maxpol_pm = max(-pm.P12/pm.P11)

    if maxpol_pm >= 0.85 and maxpol_pm <= 0.90:
        Valid_aero.append(pm_id)

#%%
Blue = []
Red = []
for pm_id in file_names:

    N = int(pm_id[pm_id.find('pm')+2:pm_id.find('_')])

    sp = pm_id[7:12]
    sp = float(".".join(sp[0:2]) + sp[2:])

    n_real = pm_id[13:16]
    n_real = float(".".join(n_real[0:2]) + n_real[2:])

    n_img = pm_id[17:22]
    n_img = float(".".join(n_img[0:2]) + n_img[2:])

    pm_eff = vars()[pm_id+'_eff']
    pm = vars()[pm_id+'_mx']
    maxpol_pm = max(-pm.P12/pm.P11)

    m = complex(n_real, n_img)
    m0 = abs((m**2-1)/(m**2+2))

    # 85â€“90% at 491 nm
    if maxpol_pm >= 0.85 and maxpol_pm <= 0.90:

        sw={}

        sw['N'] = N
        sw['sp'] = sp
        sw['Rm'] = sp*0.491/(2*np.pi)
        sw['nr'] = n_real
        sw['ni'] = n_img
        sw['taus'] = pm_eff.taus[0]
        sw['taua'] = pm_eff.taua[0]
#        sw['qa_pm'] = pm_eff.qa[0]
#        sw['qs_pm'] = pm_eff.qs[0]
#                sw['cs_pm'] = pm_eff.cs[0]
#                sw['cs_tm'] = tm_eff.cs[0]
#                sw['srf'] = srf
#                sw['corr_sca'] = corr_sca
        sw['m0'] = m0
        sw['maxpol'] = maxpol_pm
        Blue.append(sw)


    # 98% at 934 nm
    elif maxpol_pm >= 0.975 and maxpol_pm <= 0.985:
        sw={}

        sw['N'] = N
        sw['sp'] = sp
        sw['Rm'] = sp*0.934/(2*np.pi)
        sw['nr'] = n_real
        sw['ni'] = n_img
        sw['taus'] = pm_eff.taus[0]
        sw['taua'] = pm_eff.taua[0]
#        sw['qa_pm'] = pm_eff.qa[0]
#        sw['qs_pm'] = pm_eff.qs[0]
#                sw['cs_pm'] = pm_eff.cs[0]
#                sw['cs_tm'] = tm_eff.cs[0]
#                sw['srf'] = srf
#                sw['corr_sca'] = corr_sca
        sw['m0'] = m0
        sw['maxpol'] = maxpol_pm
        Red.append(sw)

Blue = pd.DataFrame(Blue)
Red = pd.DataFrame(Red)