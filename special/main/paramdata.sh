#!/bin/bash
set -e
tardis=$(find ../data/param/*.csv -type f)
tardis=(${tardis})

scrpt1=../matlabscript/paramimport.m
scrpt=../matlabscript/FullRetrieve.m

echo " %---------------------------- " > $scrpt1

for fun in ${tardis[@]}; do
    fun=${fun/..\/data\/param\//}  #now we have only *.csv
    travel=${fun/par/}
    travel=${travel/.csv/}

travel=${travel/./}
travel=${travel/./}
travel=${travel/./}
echo "%% Import data from text file.
% Script for importing data from the following text file:
%
%    /home/ucnk/Dropbox/Dropbox/matlab_plots_and_data/mstmoutputs/special/data/param/${fun}
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/03/23 15:32:28

%% Initialize variables.
addpath(genpath('/home/ucnk/Dropbox/Dropbox/matlab_plots_and_data/mstmoutputs/special'))
filename = '/home/ucnk/Dropbox/Dropbox/matlab_plots_and_data/mstmoutputs/special/data/param/${fun}';
delimiter = ' ';
startRow = 4;

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
par${travel}_P11 = dataArray{:, 1};
par${travel}_P21 = dataArray{:, 2};
par${travel}_P22 = dataArray{:, 3};
par${travel}_P33 = dataArray{:, 4};
par${travel}_P43 = dataArray{:, 5};
par${travel}_P44 = dataArray{:, 6};
% parpol${travel} = dataArray{:, 7};
parpol${travel} = -par${travel}_P21./par${travel}_P11
maxparpol${travel} = max(parpol${travel})

frwd_par${travel} = par${travel}_P11(1)
back_par${travel}= par${travel}_P11(181)

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;
%% Import data from text file.
% Script for importing data from the following text file:
%
%    /home/ucnk/Dropbox/Dropbox/matlab_plots_and_data/mstmoutputs/special/data/param/${fun}
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/03/23 16:24:40

%% Initialize variables.
filename = '/home/ucnk/Dropbox/Dropbox/matlab_plots_and_data/mstmoutputs/special/data/param/${fun}';
delimiter = ' ';
startRow = 2;
endRow = 2;

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow-startRow+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'HeaderLines', startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
ParQa${travel} = dataArray{:, 1};
ParQs${travel} = dataArray{:, 2};
ParQe${travel} = dataArray{:, 3};
ParCsca${travel} = dataArray{:, 4};
ParCabs${travel} = dataArray{:, 5};


%% Clear temporary variables
clearvars filename delimiter startRow endRow formatSpec fileID dataArray ans;" | tee -a $scrpt1 >> $scrpt

done

